MicroServices Nedir ? Neden MicroServices Tercih Etmeliyiz ?


# MicroServices Nedir ?

Microservice tek başına tek sorumluluğu olan ve tek iş yapan sadece o işe ait işleri yürüten modüler projelerdir.
Adından da anlaşılacağı gibi,microserviceler temelde bir yazılım uygulamasında belirli özellik yada fonksiyonu sağlayan, 
tek bir amaca hizmet eden, birbirinden bağımsız yazılım servislerdir. Bu hizmetler bağımsız olarak bakımı yapılabilir, izlenebilir ve dağıtılabilir yapıya sahip olmalıdır..



# MicroServices Mimari Nedir ?

Microservice mimarisi, tek bir uygulama geliştirirken modüler bir yapıda her biri küçük servis olarak düşünülmesi gereken ve her bir servisinde kendi işini ve iletişimini yürütebilen, 
çok karmaşık olmayan ve başka servislere bağımlılığı az olan mekanizmalara sahip bir yaklaşımdır. 
Bu servisler kendilerinin sorumlu olduğu tek bir işe odaklı ve bağımsız çalışabilen, otomatize bir deployment mekanizmasına sahip bir yapıdadır. 
Merkezi yönetim mekanizmalarından oldukça arındırılmış olmalıdır. 
Farklı programlama dillerinde geliştirilebilir ve farklı veri tabanı teknolojileri kullanılabilir

  Her servisin bağımlılıkları iyi yönetilmeli.
  Her servis biribirinden bağımsız olmalı ve birbirlerine az ihtiyaç duymalı. Bunun kontrolü yapılması gerekli.
  Her servisin versionu aynı olmalı.
  Her servis tek bir işi doğru bir şekilde yapmalı.





# MicroServices Avantajları:

1=> Ölçeklenebilirlik
2=> Esneklik
3=> CI/CD Kolaylığı 
4=> Teknoloji Çeşitliliği


* Ölçeklenebilirlik 
 - Bir uygulamanın dikey veya yatay olarak ölçeklenebilmesidir.
    
    - Dikey ölçeklenebilme donanımsal olarak gerçekleşir.
      Örneğin ram yetersizliği durumunda veya depolama yetersizliği durumunda kaynakları duruma göre arttırıp azaltmaktır.
      Fakat dikey ölçekleneilirliğin sınırı vardır. Sınır dolduğu zaman yeni donanım alınmalıdır.
    
    - Yatay ölçeklenebilme ise yatay olarak servisin veya uygulamanın bir kopyasını oluşturmaktır.
       Yatay ölçeklenebilme dikey ölçeklenebilmeye göre daha zordur fakat daha ucuzdur.


* Esneklik 
 - Kodsal bir hatanın veya herhangi bir servisteki hatanın tüm uygulamayı etkilememesi tüm uygulamanın çökmemesi ile tanımlanabilir.
   örnek olarak instagramdaki like buton servisi 20 sn liğine patladığı zaman instagram uygulamasının tümü patlamaz.

   


* CI/CD Kolaylığı ( Continuous integration / Continuous delivery)
  
  - Continous integration 
    Sürekli entegrasyon, kod üzerinde yapılan değişiklik sonrasında sistemin çalışır durumda olduğunu,
    yapılan değişikliğin sorunlara yol açmadığını tespit etmek için kullanılan yöntemdir.
    

  - Continuous delivery 
    Sürekli teslimat, sürekli entegrasyonun doğal bir uzantısıdır.
    Sürekli teslimat, başarılı olan bir yapıyı (build) bir ortama atma durumunun otomatik olan yoludur. 
     - Örnek verecek olursak; 
	Netflix, tamamen otomatik bir sürekli dağıtım sistemine sahiptir. 
	Dağıtımlar otomatik olduğundan ve herhangi bir zamanda gerçekleşebileceğinden, 
	uygulamanız, yeni bir sürüm dağıtıldığında geçici kesintilerden etkilenmeyecek şekilde tasarlanmalıdır.
 
  - Uygulamamız daha küçük parçalara bölündüğü için dağıtımı kolay ve monlitik yapıda uygulamanın ayağı kalkma süresi uzun olması problemi
      uygulamayı servislere bölüdüğümüz için herhangi bir servisin geç ayağı kalkması ile uygulamanın fazla etkilenmemesi ile çözülür.
     Veya herhangi bir zaman diliminde gelen yoğun istek üzerine iş yükü fazla olması sebebi ile instance sayısı ayarlanabilir. 
     Yani dağıtım (deployment) sürecinde kolaylık sağlar.


   
* Teknoloji Çeşitliliği
   - Kullanılacak dil veya teknolojiler servislere özgü kullanılabilir.
     Diğer servisler bu teknolojileri bilmek zorunda değiller. 
     çünkü amaç sadece servislerin haberleşmesidir. Aynı formatta uygun formatta haberleştikleri sürece kullanılan teknolojiler birbirinden bağımsız ve özgürdür.
 
     Ayrıca development sürecinde servis dağıtımında developer yetkinliğine göre dağıtılabilir.


# MicroServices Dezavantajları

- Servis Yönetimi yapılması gerek. çalışan instance ların ip adressleri bilgileri tutulmalı ve bu bileşenlerin yönetilmesi gerekli.
  Servis Bağlantıları kontrol edilmeli. Bunlar ayrı bir zorluk gerektiriyor.



# MicroServices Ne Değildir ?

 Örneğin Klavyedeki her tuş bir iş ve bu iş için oluşturulan servis olsun ve bu örnek üzerinden anlatalım

- Birden fazla domain iş yükünü barındıran makro projeler microservice değildir!
   -- Yani her servis bir iş yükünü barındırmalıdır. Yani proje olabildiğince küçük servislere bölünmeli ve her servis bir işden sorumludur.
      Örnekde olduğu gibi yazılan bir servis birden fazla tuşu kapsamamalıdır. Her servis bir tuş iş yükü için yazılmalıdır. 

- Tek başına bağımsız deployment yapılamayan projeler microservice değildir!
  -- Yani yazılan bir servis tek başına deployment edilebilmelidir. Diğer servisler bu olaydan etkilenmemelidir.
     Örnekde olduğu gibi herhangi bir tuş söküp takıldığı zaman diğer tuşlar bu tuşun bu olayından etkilenmemelidir.
 
- Başka projelere bağımlılık oluşturan projeler microservis değildir!
  -- Örnekde olduğu gibi sökülen bir tuşun fonksiyonunu değiştirip tekrar takıldığı zaman bu değişimden dolayı başka bir tuşun değişime ihtiyacı olmaması gerekir.


- Bir iş akışına ait bir sürecin ölçeklenemediği projeler microservice değildir!
  -- Yani herhangi bir servisin iş yükü arttığı zaman bu servisin kopyasından oluşturabilip sunucu sayısı arttırılabilmelidir.







